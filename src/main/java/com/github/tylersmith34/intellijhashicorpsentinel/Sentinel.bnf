{
  parserClass="com.github.tylersmith34.intellijhashicorpsentinel.SentinelParser"
  parserUtilClass="com.github.tylersmith34.intellijhashicorpsentinel.SentinelParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sentinel"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.tylersmith34.intellijhashicorpsentinel.psi"
  psiImplPackage="com.github.tylersmith34.intellijhashicorpsentinel.psi.impl"

  elementTypeHolderClass="com.github.tylersmith34.intellijhashicorpsentinel.SentinelTypes"
  elementTypeClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.SentinelElementType"
  tokenTypeClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.SentinelTokenType"

  psiImplUtilClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.impl.SentinelPsiImplUtil"

    tokens = [
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        COMMENT = "regexp:(//.*)|(#.*)"
        BLOCK_COMMENT = "regexp:/\*([^*]|\*[^/])*\*?(\*/)?"
        NUMBER='regexp:-?(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'
        L_BRACKET='['
        R_BRACKET=']'
        L_CURLY='{'
        R_CURLY='}'
        L_PAREN='('
        R_PAREN=')'
        COMMA=','
        PERIOD='.'
        EQUALS='='
        LESS_THAN='<'
        MINUS='-'
        PLUS='+'
        SPLAT='*'
        SLASH='/'
        PERCENT='%'
        COLON=':'
        DOUBLE_EQUALS='=='
        NOT_EQUALS='!='
        LESS_THAN_EQUALS='<='
        GREATER_THAN='>'
        GREATER_THAN_EQUALS='>='
        MINUS='-'
        EXCLAMATION='!'
   ]
}

//SimpleFile ::= IfStatement*
SimpleFile ::= Definition*
Definition ::= { ImportStatement | ExternalParameters | GlobalVariableDefinition | MainRule | RuleDefinition | FunctionDeclaration }

//Ident    ::= identifier+ (Selector | ( L_BRACKET (StringLiteral | NumberLiteral ) R_BRACKET ) | ElseOperator)*


Ident    ::= identifier+ (Selector
                            |  ( L_BRACKET ( StringLiteral | NumberLiteral ) R_BRACKET )
                            | (L_PAREN ( StringLiteral | NumberLiteral ) R_PAREN )
                            | ElseOperator
                          )*
Selector ::= PERIOD ( Ident | FunctionCall )

//import
ImportStatement ::= import ImportedName
ImportedName    ::= StringLiteral (as ImportedAlias )?
ImportedAlias   ::= Ident

//External param
ExternalParameters       ::= param Ident ( default Literal )?
GlobalVariableDefinition ::= VariableDefinition

//Rules
MainRule       ::= main EQUALS RuleBase
MainRuleBlock  ::= L_CURLY BooleanExpressions R_CURLY
RuleDefinition ::= Ident EQUALS RuleBase
RuleBase       ::= rule ( when BooleanExpressions )? MainRuleBlock

//Functions
FunctionDeclaration ::= Ident EQUALS func Function
Function            ::= Parameters FunctionBody
FunctionBody        ::= L_CURLY FunctionStatement* ReturnStatement  R_CURLY
ReturnStatement     ::= return ( Ident | Literal )
Parameters          ::= L_PAREN ( IdentifierList )? R_PAREN
IdentifierList      ::= Ident+ ( COMMA Ident+ )*
FunctionCall        ::= Ident Parameters

//Statements
FunctionStatement   ::= VariableDefinition | IfStatement | ForStatement | FunctionCall | CaseStatement
Statement           ::= VariableDefinition | IfStatement | ReturnStatement | ForStatement | FunctionCall | CaseStatement


// If Statements
IfStatement        ::= if ( BooleanExpressions | L_PAREN BooleanExpressions R_PAREN ) Block ( else ( IfStatement | Block ) )?
Block              ::= L_CURLY Statement R_CURLY


//Boolean expressions
BooleanExpressions     ::= BooleanExpression+ (LogicalOperator BooleanExpression)*
BooleanExpression      ::= FunctionCall |
    UnaryOperator ( Ident | Literal | QuantifierExpression)? |
    ( Ident | Literal | QuantifierExpression ) ( BooleanOperators ) ( Ident | Literal | QuantifierExpression) |
    ElseOperator
BooleanOperators       ::= SetOperator | ComparisonOperator | UnaryOperator | MultipleDivideOperator | AddSubtractOperator | LogicalOperator
ElseClause             ::= else
ElseOperator           ::= ElseClause Literal
LogicalOperator        ::= and | or | xor
SetOperator            ::= (not)? ( contains | in )
ComparisonOperator     ::= DOUBLE_EQUALS | NOT_EQUALS | LESS_THAN | LESS_THAN_EQUALS | GREATER_THAN | GREATER_THAN_EQUALS | is | is not | matches | not matches
AddSubtractOperator    ::= PLUS | MINUS
MultipleDivideOperator ::= SPLAT | SLASH | PERCENT
UnaryOperator          ::= PLUS | MINUS | EXCLAMATION | not


// For Statements
ForBlock     ::= L_CURLY ( Statement | BreakStmt | ContinueStmt ) R_CURLY
ForStatement ::= for Ident as ( Ident COMMA )? Ident ForBlock
BreakStmt    ::= break
ContinueStmt ::= continue


//Variables
VariableDefinition ::= Ident ( AddSubtractOperator | MultipleDivideOperator )? EQUALS ( Literal | ListDefinition | MapDefinition | FunctionCall | QuantifierExpression | BooleanExpressions )
ListDefinition     ::= L_BRACKET ( ElementList )? R_BRACKET
ElementList        ::= Element+ ( COMMA Element)*
Element            ::= Literal | ListDefinition | MapDefinition
MapDefinition      ::= L_CURLY ( KeyedElementList )? R_CURLY
KeyedElementList   ::= KeyedElement ( COMMA KeyedElement COMMA?)*
KeyedElement       ::= Element COLON Element

QuantifierExpression ::= QuantifierOperator Ident as ( Ident COMMA )? Ident L_CURLY BooleanExpressions  R_CURLY
QuantifierOperator   ::= all | any | filter


//case
CaseStatement  ::= case (Ident | Literal) L_CURLY ( CaseWhenClause* ) R_CURLY
CaseWhenClause ::= CaseWhenCase COLON Statement
CaseWhenCase   ::= when CaseClause+ ( COMMA CaseClause )* | ElseClause
CaseClause     ::= Ident | Literal | Statement

//primitive types
Literal          ::= Number | NumberLiteral | Decimal | OctalLiteral | HexLiteral | Float | StringLiteral | BooleanLiteral | NullLiteral | UndefinedLiteral
BooleanLiteral   ::= true | false
NullLiteral      ::= null
UndefinedLiteral ::= undefined
NumberLiteral    ::= Decimal | OctalLiteral | HexLiteral
OctalLiteral     ::= "0" ( OctalDigit )
OctalDigit       ::= 1|2|3|4|5|6|7
HexDigit         ::= 1|2|3|4|5|6|7 | "A" | "F" | "a" | "f"
Letter           ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
EscapedCharacter ::= '\' ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | '\' | '"' )
HexLiteral       ::= "0" ( "x" | "X" ) HexDigit { HexDigit }
Decimal          ::= '-'? DecimalDigit+ (PERIOD DecimalDigit+)?
DecimalDigit     ::= 1|2|3|4|5|6|7|8|9|0
Float            ::= decimals "." ( decimals )* ( exponent )? | decimals exponent | "." decimals ( exponent )?
decimals         ::= Decimal*
exponent         ::= ( "e" | "E" ) [ PLUS | MINUS ] decimals
StringLiteral    ::= ('"' ( Letter | EscapedCharacter)* '"') | DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING
