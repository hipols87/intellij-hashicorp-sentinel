{
  parserClass="com.github.tylersmith34.intellijhashicorpsentinel.SentinelParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sentinel"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.tylersmith34.intellijhashicorpsentinel.psi"
  psiImplPackage="com.github.tylersmith34.intellijhashicorpsentinel.psi.impl"

  elementTypeHolderClass="com.github.tylersmith34.intellijhashicorpsentinel.SentinelTypes"
  elementTypeClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.SentinelElementType"
  tokenTypeClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.SentinelTokenType"

  psiImplUtilClass="com.github.tylersmith34.intellijhashicorpsentinel.psi.impl.SentinelPsiImplUtil"

    tokens = [
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        NUMBER='regexp:-?(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'
        COMMENT = "regexp:(//.*)|(#.*)"
        BLOCK_COMMENT = "regexp:/\*([^*]|\*[^/])*\*?(\*/)?"
        L_BRACKET='['
        R_BRACKET=']'
        L_CURLY='{'
        R_CURLY='}'
        L_PAREN='('
        R_PAREN=')'
        COMMA=','
        EQUALS='='
        TRUE='true'
        FALSE='false'
        NULL='null'
        UNDEFINED='undefined'
   ]
}

SimpleFile ::= Definition*

Definition ::= ( ImportStatement | ExternalParameters | GlobalVariableDefinition | MainRule )+

//import
ImportStatement ::= import StringLiteral (as IDENTIFIER )?

//External param
ExternalParameters ::= param IDENTIFIER ( default StringLiteral )?

GlobalVariableDefinition ::= (IDENTIFIER EQUALS Literal) {
    recoverWhile = not_rule
}

//main
MainRule ::= main EQUALS rule '{' FunctionBody '}' {
 recoverWhile = not_brace_or_next_value
 pin=5
}

//Functions
FunctionDeclaration ::=  IDENTIFIER EQUALS func L_PAREN (FunctionInput) R_PAREN L_CURLY FunctionBody R_CURLY {
  recoverWhile = not_brace_or_next_value
}
FunctionInput ::= (IDENTIFIER | Literal | COMMA)* {
  recoverWhile = not_paren_or_next_value
}
FunctionBody ::= Statement* {
    recoverWhile = not_brace_or_next_value
}
Statement ::= VariableDefinition | ReturnStatement
VariableDefinition ::= (IDENTIFIER EQUALS Literal) {
    recoverWhile = not_EOL
}
ReturnStatement ::= return ( IDENTIFIER | Literal ) {
    recoverWhile = not_EOL
}


//rule




//Object types
//Type ::= int | string | map | list | Literal
Literal ::= StringLiteral | NumberLiteral | BooleanLiteral | NullLiteral | UndefinedLiteral
StringLiteral::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING
NumberLiteral::= NUMBER
BooleanLiteral::= true | false
NullLiteral::= NULL
UndefinedLiteral::= UNDEFINED

private EOL ::= CRLF
private not_EOL ::= !CRLF
private not_EOL ::= !(rule | func)
private not_brace_or_next_value ::= !('}'|value)
private not_paren_or_next_value ::= !(')'|value)
private not_bracket_or_next_value ::= !(']'|(Literal | array | object))
