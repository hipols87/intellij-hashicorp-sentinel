/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.tylersmith34.intellijhashicorpsentinel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.tylersmith34.intellijhashicorpsentinel.SentinelTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SentinelLexer.flex</tt>
 */
public class SentinelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\2\2\5\1\2\22\0\1\6\1\0\1\7\1\13\3\0\1\11\1\21\1\22\1\14\1\0\1"+
    "\23\2\0\1\12\12\4\2\0\1\51\1\24\1\53\2\0\1\3\1\56\1\62\1\3\1\61\1\64\5\3\1"+
    "\60\5\3\1\63\1\57\7\3\1\15\1\10\1\16\1\0\1\55\1\0\1\34\1\37\1\42\1\30\1\31"+
    "\1\32\1\54\1\46\1\33\1\66\1\41\1\27\1\47\1\25\1\43\1\50\1\3\1\40\1\36\1\44"+
    "\1\26\1\65\1\45\1\52\1\35\1\3\1\17\1\0\1\20\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\17\3\1\1\5\3\1\4\2\0\1\5\1\17\7\3"+
    "\1\20\3\3\1\21\13\3\4\0\5\3\1\17\6\3"+
    "\1\22\1\3\1\23\1\24\13\3\4\0\5\3\1\17"+
    "\1\25\2\3\1\26\1\27\4\3\1\30\1\3\1\31"+
    "\2\3\1\32\1\33\1\34\1\3\4\0\3\3\1\35"+
    "\3\3\1\36\1\3\1\37\1\40\3\3\1\41\4\0"+
    "\1\42\2\3\1\43\2\3\1\44\1\45\1\3\1\46"+
    "\4\0\3\3\1\47\1\3\1\0\1\50\2\0\3\3"+
    "\1\51\1\52\2\0\2\3\1\53\2\0\2\3\2\0"+
    "\2\3\2\0\1\3\1\54\1\55\1\0\1\3\1\0"+
    "\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\67\0\u063b\0\u0672"+
    "\0\67\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\245\0\u0861\0\u0898\0\u08cf\0\245\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\245\0\u0ed3\0\245\0\245\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\67\0\245\0\u1356\0\u138d\0\245\0\245\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\245\0\u14a0\0\245\0\u14d7\0\u150e"+
    "\0\245\0\245\0\245\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\245\0\u16fd\0\u1734\0\u176b\0\245"+
    "\0\u17a2\0\245\0\245\0\u17d9\0\u1810\0\u1847\0\245\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\245\0\u195a\0\u1991\0\245\0\u19c8"+
    "\0\u19ff\0\245\0\245\0\u1a36\0\245\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\245\0\u1bee\0\u1c25\0\67"+
    "\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\245\0\67\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\245\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\245"+
    "\0\67\0\u20a8\0\u20df\0\u2116\0\245\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\2\2\3\1\5\1\2\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\2\4\1\30\1\31\1\4\1\32"+
    "\1\33\1\34\1\35\1\4\1\36\1\37\1\40\1\4"+
    "\1\2\2\4\1\41\1\42\1\4\1\43\1\44\2\4"+
    "\1\45\1\4\71\0\1\3\2\0\2\3\63\0\2\4"+
    "\20\0\24\4\1\0\1\4\1\0\13\4\2\5\1\0"+
    "\4\5\1\46\1\47\56\5\2\6\1\0\5\6\1\50"+
    "\1\51\55\6\12\0\1\10\1\0\1\52\52\0\1\10"+
    "\2\0\2\10\1\0\61\10\3\0\2\4\20\0\1\4"+
    "\1\53\22\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\1\54\23\4\1\0\1\4\1\0\13\4\3\0"+
    "\2\4\20\0\4\4\1\55\17\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\2\4\1\56\21\4\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\1\4\1\57"+
    "\5\4\1\60\6\4\1\61\5\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\5\4\1\62\14\4\1\63"+
    "\1\4\1\0\1\4\1\0\13\4\3\0\2\4\20\0"+
    "\1\64\1\4\1\65\6\4\1\66\1\4\1\67\10\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\13\4"+
    "\1\70\10\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\1\4\1\71\2\4\1\72\17\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\7\4\1\73\6\4"+
    "\1\74\5\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\12\4\1\75\11\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\13\4\1\76\10\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\21\4\1\77\2\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\7\4"+
    "\1\100\14\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\7\4\1\101\14\4\1\0\1\4\1\0\13\4"+
    "\25\0\1\102\2\0\1\103\1\104\16\0\1\105\21\0"+
    "\2\4\20\0\2\4\1\106\21\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\17\4\1\107\4\4\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\24\4\1\0"+
    "\1\110\1\0\13\4\3\0\2\4\20\0\24\4\1\0"+
    "\1\4\1\0\7\4\1\111\3\4\3\0\2\4\20\0"+
    "\7\4\1\112\14\4\1\0\1\4\1\0\13\4\2\5"+
    "\1\0\64\5\2\6\1\0\64\6\14\52\1\113\52\52"+
    "\3\0\2\4\20\0\2\4\1\114\21\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\3\4\1\115\20\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\5\4"+
    "\1\116\16\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\11\4\1\117\12\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\1\120\23\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\2\4\1\121\21\4\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\13\4\1\122"+
    "\10\4\1\0\1\4\1\0\13\4\3\0\2\4\20\0"+
    "\23\4\1\123\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\10\4\1\124\13\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\2\4\1\125\21\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\13\4\1\126\10\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\4\4"+
    "\1\127\17\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\2\4\1\130\21\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\17\4\1\131\4\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\11\4\1\132\12\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\1\133"+
    "\23\4\1\0\1\4\1\0\13\4\3\0\2\4\20\0"+
    "\24\4\1\0\1\4\1\0\12\4\1\134\3\0\2\4"+
    "\20\0\1\4\1\135\22\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\4\4\1\136\17\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\6\4\1\137\15\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\13\4"+
    "\1\140\10\4\1\0\1\4\1\0\13\4\26\0\1\141"+
    "\73\0\1\142\105\0\1\143\54\0\1\144\31\0\2\4"+
    "\20\0\16\4\1\145\5\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\7\4\1\146\14\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\23\4\1\147\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\24\4\1\0"+
    "\1\4\1\0\4\4\1\150\6\4\3\0\2\4\20\0"+
    "\2\4\1\151\21\4\1\0\1\4\1\0\13\4\12\52"+
    "\1\152\54\52\3\0\2\4\20\0\2\4\1\153\21\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\4\4"+
    "\1\154\17\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\7\4\1\155\14\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\4\4\1\156\17\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\15\4\1\157\6\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\11\4"+
    "\1\160\12\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\16\4\1\161\5\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\7\4\1\162\14\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\7\4\1\163\14\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\4\4"+
    "\1\164\17\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\1\4\1\165\22\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\4\4\1\166\17\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\17\4\1\167\4\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\4\4"+
    "\1\170\17\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\4\4\1\171\17\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\1\172\23\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\1\173\23\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\7\4\1\174\14\4"+
    "\1\0\1\4\1\0\13\4\47\0\1\175\73\0\1\176"+
    "\62\0\1\177\51\0\1\200\36\0\2\4\20\0\15\4"+
    "\1\201\6\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\17\4\1\202\4\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\13\4\1\203\10\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\24\4\1\0\1\4"+
    "\1\0\10\4\1\204\2\4\3\0\2\4\20\0\1\4"+
    "\1\205\22\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\5\4\1\206\16\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\1\4\1\207\22\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\4\4\1\210\17\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\13\4"+
    "\1\211\10\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\10\4\1\212\13\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\14\4\1\213\7\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\13\4\1\214\10\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\6\4"+
    "\1\215\15\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\15\4\1\216\6\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\22\4\1\217\1\4\1\0\1\4"+
    "\1\0\13\4\37\0\1\220\62\0\1\221\73\0\1\222"+
    "\75\0\1\223\22\0\2\4\20\0\14\4\1\224\7\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\4\4"+
    "\1\225\17\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\4\4\1\226\17\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\4\4\1\227\17\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\6\4\1\230\15\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\2\4"+
    "\1\231\21\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\17\4\1\232\4\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\1\233\23\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\1\234\23\4\1\0\1\4"+
    "\1\0\13\4\3\0\2\4\20\0\17\4\1\235\4\4"+
    "\1\0\1\4\1\0\13\4\31\0\1\236\101\0\1\237"+
    "\53\0\1\240\71\0\1\241\35\0\2\4\20\0\22\4"+
    "\1\242\1\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\11\4\1\243\12\4\1\0\1\4\1\0\13\4"+
    "\3\0\2\4\20\0\1\244\23\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\17\4\1\245\4\4\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\1\4\1\246"+
    "\22\4\1\0\1\4\1\0\13\4\40\0\1\247\101\0"+
    "\1\250\51\0\1\251\70\0\1\252\31\0\2\4\20\0"+
    "\4\4\1\253\17\4\1\0\1\4\1\0\13\4\3\0"+
    "\2\4\20\0\11\4\1\254\12\4\1\0\1\4\1\0"+
    "\13\4\3\0\2\4\20\0\4\4\1\255\17\4\1\0"+
    "\1\4\1\0\13\4\3\0\2\4\20\0\4\4\1\256"+
    "\17\4\1\0\1\4\1\0\13\4\53\0\1\257\51\0"+
    "\1\260\65\0\1\261\34\0\2\4\20\0\1\262\23\4"+
    "\1\0\1\4\1\0\13\4\3\0\2\4\20\0\6\4"+
    "\1\263\15\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\3\4\1\264\20\4\1\0\1\4\1\0\13\4"+
    "\33\0\1\265\110\0\1\266\14\0\2\4\20\0\17\4"+
    "\1\267\4\4\1\0\1\4\1\0\13\4\3\0\2\4"+
    "\20\0\16\4\1\270\5\4\1\0\1\4\1\0\13\4"+
    "\43\0\1\271\54\0\1\272\40\0\2\4\20\0\24\4"+
    "\1\0\1\4\1\0\4\4\1\273\6\4\3\0\2\4"+
    "\20\0\1\274\23\4\1\0\1\4\1\0\13\4\25\0"+
    "\1\275\113\0\1\276\17\0\2\4\20\0\6\4\1\277"+
    "\15\4\1\0\1\4\1\0\13\4\3\0\2\4\20\0"+
    "\11\4\1\300\12\4\1\0\1\4\1\0\13\4\53\0"+
    "\1\301\63\0\1\302\21\0\2\4\20\0\11\4\1\303"+
    "\12\4\1\0\1\4\1\0\13\4\40\0\1\304\31\0"+
    "\2\4\20\0\17\4\1\305\4\4\1\0\1\4\1\0"+
    "\13\4\53\0\1\306\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8525];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\10\11\25\1\1\11\2\0\1\11"+
    "\30\1\4\0\33\1\4\0\5\1\1\11\22\1\4\0"+
    "\17\1\4\0\12\1\4\0\5\1\1\0\1\11\2\0"+
    "\4\1\1\11\2\0\3\1\2\0\2\1\2\0\2\1"+
    "\2\0\2\1\1\11\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public SentinelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SentinelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return COMMENT;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return L_BRACKET;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return R_BRACKET;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return L_CURLY;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return R_CURLY;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return L_PAREN;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return R_PAREN;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return IF;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return AS;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return FOR;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return ANY;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return ALL;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return NULL;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return ELSE;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return FUNC;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return RULE;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return CASE;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return TRUE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return WHEN;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return MAIN;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return CRLF;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return FALSE;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return ARRAY;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return BREAK;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return PARAM;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return BLOCK;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return VALUE;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return IMPORT;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return RETURN;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return OBJECT;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return DEFAULT;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return DIGIT;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return CONTINUE;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return NUMBER;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return UNDEFINED;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return EXPRESSIONS;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return EXPRESSION;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return STATEMENTLIST;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return PRIMARY_EXPR;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
