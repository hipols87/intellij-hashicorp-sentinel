/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.tylersmith34.intellijhashicorpsentinel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.tylersmith34.intellijhashicorpsentinel.SentinelTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_SentinelLexer.flex</tt>
 */
public class _SentinelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\2\2\5\1\2\22\0\1\6\1\0\1\7\1\13\3\0\1\11\1\27\1\30\1\14\1\22\1"+
    "\31\1\15\1\20\1\12\1\16\11\4\2\0\1\51\1\32\1\53\2\0\1\60\3\3\1\21\6\3\1\64"+
    "\2\3\1\62\3\3\1\63\7\3\1\23\1\10\1\24\1\0\1\57\1\0\1\41\1\54\1\52\1\43\1\44"+
    "\1\45\1\61\1\3\1\33\1\3\1\55\1\47\1\34\1\50\1\36\1\35\1\3\1\37\1\42\1\40\1"+
    "\46\2\3\1\17\1\56\1\3\1\25\1\0\1\26\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\4\1\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\14\3\1\1\4\3"+
    "\2\0\1\5\2\0\1\6\1\21\1\0\2\3\1\22"+
    "\1\23\2\3\1\24\3\3\1\25\13\3\3\0\4\3"+
    "\2\4\1\0\1\21\1\26\6\3\1\27\1\30\1\31"+
    "\3\3\1\32\3\3\1\33\1\3\3\0\4\3\1\21"+
    "\1\3\1\34\2\3\1\35\1\36\1\3\1\37\2\3"+
    "\1\40\1\3\1\41\3\0\5\3\1\42\3\3\1\43"+
    "\1\3\3\0\2\3\1\44\2\3\1\45\1\46\1\3"+
    "\1\47\1\3\3\0\4\3\1\50\1\3\3\0\5\3"+
    "\3\0\1\51\1\52\2\3\1\53\3\0\2\3\3\0"+
    "\2\3\2\0\1\54\2\3\2\0\2\3\2\0\1\3"+
    "\1\55\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\0\1\56\1\3\1\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\65\0\u066b\0\u06a0\0\65\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\237\0\237\0\u07a9\0\u07de\0\237\0\u0813\0\u0848\0\u087d"+
    "\0\237\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0ca1\0\u0cd6\0\237"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\237\0\237"+
    "\0\237\0\u0e49\0\u0e7e\0\u0eb3\0\237\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\237\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\65\0\u112f\0\237\0\u1164\0\u1199\0\237\0\237"+
    "\0\u11ce\0\237\0\u1203\0\u1238\0\237\0\u126d\0\237\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\237"+
    "\0\u144a\0\u147f\0\u14b4\0\237\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\237\0\u1627\0\u165c\0\237\0\237\0\u1691"+
    "\0\237\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\237\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\237\0\237"+
    "\0\u1aea\0\u1b1f\0\237\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\65"+
    "\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43"+
    "\0\u1f78\0\237\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"+
    "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\65"+
    "\0\u225e\0\u2293\0\237\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\2\3\1\6\1\2\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\4"+
    "\1\2\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\4\1\35\1\36\1\37\1\40\1\4\1\41\1\42"+
    "\1\43\1\2\1\44\3\4\1\45\2\4\1\46\1\4"+
    "\67\0\1\3\2\0\2\3\61\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\16\4\1\0\1\4\1\0\11\4"+
    "\4\0\1\5\11\0\1\5\1\0\1\47\1\50\22\0"+
    "\1\50\20\0\2\6\1\0\4\6\1\51\1\52\54\6"+
    "\2\7\1\0\5\7\1\53\1\54\53\7\12\0\1\11"+
    "\1\0\1\55\50\0\1\11\2\0\2\11\1\0\57\11"+
    "\4\0\1\5\11\0\1\13\52\0\1\5\11\0\1\5"+
    "\1\56\1\47\1\50\22\0\1\50\23\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\3\4\1\57\12\4\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\1\4\1\60\10\4\1\61\2\4\1\62"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\6\4\1\63\7\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\6\4\1\64\7\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\65\11\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\11\4\1\66\1\4"+
    "\1\67\2\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\4\4\1\70\11\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\7\4\1\71\4\4\1\72\1\73"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\11\4\1\74\4\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\14\4\1\75\1\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\1\76"+
    "\2\4\1\77\2\4\1\100\4\4\1\101\2\4\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\15\4\1\102\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\3\4"+
    "\1\103\7\4\1\104\2\4\1\0\1\4\1\0\11\4"+
    "\35\0\1\105\10\0\1\106\3\0\1\107\15\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\3\4\1\110\12\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\4\4\1\111\11\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\7\4\1\112\6\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\5\4"+
    "\1\113\10\4\1\0\1\4\1\0\11\4\4\0\1\114"+
    "\11\0\1\114\52\0\1\115\10\0\1\116\1\115\3\0"+
    "\1\116\42\0\2\6\1\0\62\6\2\7\1\0\62\7"+
    "\14\55\1\117\50\55\4\0\1\5\11\0\1\5\51\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\4\4\1\120"+
    "\11\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\121\13\4\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\1\122\15\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\123\11\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\5\4\1\124\10\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\14\4\1\125\1\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\13\4\1\126\2\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\14\4"+
    "\1\127\1\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\10\4\1\130\5\4"+
    "\1\0\1\4\1\0\2\4\1\131\6\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\12\4\1\132\3\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\7\4\1\133\6\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\14\4\1\134\1\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\135\11\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\14\4\1\136\1\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\15\4\1\137\1\0\1\4\1\0"+
    "\11\4\3\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\10\4\1\140\5\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\5\4\1\141"+
    "\10\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\14\4\1\142\1\4\1\0"+
    "\1\4\1\0\11\4\37\0\1\143\75\0\1\144\52\0"+
    "\1\145\31\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\15\4\1\146\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\11\4\1\147\4\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\7\4\1\150\6\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\6\4\1\151\7\4\1\0\1\4\1\0\11\4"+
    "\4\0\1\114\11\0\1\114\2\0\1\50\22\0\1\50"+
    "\24\0\1\115\11\0\1\115\46\0\12\55\1\152\52\55"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\3\4"+
    "\1\153\12\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\15\4\1\154\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\6\4\1\155\7\4\1\0\1\4\1\0"+
    "\11\4\3\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\13\4\1\156\2\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\11\4\1\157"+
    "\4\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\11\4\1\160\4\4\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\6\4\1\161\7\4\1\0\1\4\1\0"+
    "\11\4\3\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\11\4\1\162\4\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\5\4\1\163"+
    "\10\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\7\4\1\164\6\4\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\16\4\1\0\1\165\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\11\4\1\166"+
    "\4\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\14\4\1\167\1\4\1\0"+
    "\1\4\1\0\11\4\33\0\1\170\72\0\1\171\73\0"+
    "\1\172\17\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\5\4\1\173\10\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\6\4\1\174"+
    "\7\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\1\175\15\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\5\4\1\176\10\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\177\11\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\1\4\1\200\14\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\4\4\1\201\11\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\13\4\1\202\2\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\11\4"+
    "\1\203\4\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\11\4\1\204\4\4"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\12\4\1\205\3\4\1\0\1\4"+
    "\1\0\11\4\34\0\1\206\67\0\1\207\70\0\1\210"+
    "\24\0\2\4\11\0\2\4\1\0\1\4\11\0\1\211"+
    "\5\4\1\212\7\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\16\4\1\0"+
    "\1\4\1\0\1\4\1\213\7\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\16\4\1\0\1\4\1\0"+
    "\5\4\1\214\3\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\11\4\1\215\4\4\1\0\1\4\1\0"+
    "\11\4\3\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\5\4\1\216\10\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\15\4\1\217"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\14\4\1\220\1\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\4\4\1\221\11\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\1\222"+
    "\15\4\1\0\1\4\1\0\11\4\41\0\1\223\101\0"+
    "\1\224\41\0\1\225\34\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\15\4\1\226\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\1\227"+
    "\15\4\1\0\1\4\1\0\11\4\3\0\2\4\11\0"+
    "\2\4\1\0\1\4\11\0\15\4\1\230\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\231\14\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\5\4"+
    "\1\232\10\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\15\4\1\233\1\0"+
    "\1\4\1\0\11\4\37\0\1\234\104\0\1\235\45\0"+
    "\1\236\27\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\13\4\1\237\2\4\1\0\1\4\1\0\11\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\15\4\1\240"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\1\4\1\241\14\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\11\4\1\242\4\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\11\4"+
    "\1\243\4\4\1\0\1\4\1\0\11\4\56\0\1\244"+
    "\52\0\1\245\53\0\1\246\34\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\11\4\1\247\4\4\1\0\1\4"+
    "\1\0\11\4\3\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\7\4\1\250\6\4\1\0\1\4\1\0\11\4"+
    "\3\0\2\4\11\0\2\4\1\0\1\4\11\0\11\4"+
    "\1\251\4\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\15\4\1\252\1\0"+
    "\1\4\1\0\11\4\3\0\2\4\11\0\2\4\1\0"+
    "\1\4\11\0\10\4\1\253\5\4\1\0\1\4\1\0"+
    "\11\4\57\0\1\254\24\0\1\255\103\0\1\256\31\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\15\4\1\257"+
    "\1\0\1\4\1\0\11\4\3\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\5\4\1\260\10\4\1\0\1\4"+
    "\1\0\11\4\44\0\1\261\55\0\1\262\77\0\1\263"+
    "\17\0\2\4\11\0\2\4\1\0\1\4\11\0\5\4"+
    "\1\264\10\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\16\4\1\0\1\4"+
    "\1\0\10\4\1\265\17\0\1\266\104\0\1\267\100\0"+
    "\1\270\14\0\2\4\11\0\2\4\1\0\1\4\11\0"+
    "\16\4\1\0\1\4\1\0\6\4\1\271\2\4\3\0"+
    "\2\4\11\0\2\4\1\0\1\4\11\0\1\272\15\4"+
    "\1\0\1\4\1\0\11\4\35\0\1\273\73\0\1\274"+
    "\23\0\2\4\11\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\275\13\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\7\4\1\276\6\4"+
    "\1\0\1\4\1\0\11\4\37\0\1\277\67\0\1\300"+
    "\25\0\2\4\11\0\2\4\1\0\1\4\11\0\11\4"+
    "\1\301\4\4\1\0\1\4\1\0\11\4\3\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\5\4\1\302\10\4"+
    "\1\0\1\4\1\0\11\4\44\0\1\303\62\0\1\304"+
    "\25\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\305\11\4\1\0\1\4\1\0\11\4\42\0\1\306"+
    "\55\0\1\307\34\0\2\4\11\0\2\4\1\0\1\4"+
    "\11\0\6\4\1\310\7\4\1\0\1\4\1\0\11\4"+
    "\42\0\1\311\60\0\1\312\31\0\2\4\11\0\2\4"+
    "\1\0\1\4\11\0\5\4\1\313\10\4\1\0\1\4"+
    "\1\0\11\4\33\0\1\314\101\0\1\315\17\0\2\4"+
    "\11\0\2\4\1\0\1\4\11\0\3\4\1\316\12\4"+
    "\1\0\1\4\1\0\11\4\36\0\1\317\101\0\1\320"+
    "\14\0\2\4\11\0\2\4\1\0\1\4\11\0\4\4"+
    "\1\321\11\4\1\0\1\4\1\0\11\4\50\0\1\322"+
    "\17\0\2\4\11\0\2\4\1\0\1\4\11\0\7\4"+
    "\1\323\6\4\1\0\1\4\1\0\11\4\53\0\1\324"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\11\11\21\1\2\0\1\11\2\0"+
    "\1\11\1\1\1\0\26\1\3\0\6\1\1\0\24\1"+
    "\3\0\4\1\1\11\15\1\3\0\13\1\3\0\12\1"+
    "\3\0\6\1\3\0\5\1\3\0\5\1\3\0\2\1"+
    "\3\0\2\1\2\0\1\11\2\1\2\0\2\1\2\0"+
    "\2\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SentinelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SentinelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 52: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 53: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 54: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 55: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 56: break;
          case 9: 
            { return L_BRACKET;
            } 
            // fall through
          case 57: break;
          case 10: 
            { return R_BRACKET;
            } 
            // fall through
          case 58: break;
          case 11: 
            { return L_CURLY;
            } 
            // fall through
          case 59: break;
          case 12: 
            { return R_CURLY;
            } 
            // fall through
          case 60: break;
          case 13: 
            { return L_PAREN;
            } 
            // fall through
          case 61: break;
          case 14: 
            { return R_PAREN;
            } 
            // fall through
          case 62: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 63: break;
          case 16: 
            { return EQUALS;
            } 
            // fall through
          case 64: break;
          case 17: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 65: break;
          case 18: 
            { return IF;
            } 
            // fall through
          case 66: break;
          case 19: 
            { return IN;
            } 
            // fall through
          case 67: break;
          case 20: 
            { return OR;
            } 
            // fall through
          case 68: break;
          case 21: 
            { return AS;
            } 
            // fall through
          case 69: break;
          case 22: 
            { return XOR;
            } 
            // fall through
          case 70: break;
          case 23: 
            { return ALL;
            } 
            // fall through
          case 71: break;
          case 24: 
            { return AND;
            } 
            // fall through
          case 72: break;
          case 25: 
            { return ANY;
            } 
            // fall through
          case 73: break;
          case 26: 
            { return FOR;
            } 
            // fall through
          case 74: break;
          case 27: 
            { return NOT;
            } 
            // fall through
          case 75: break;
          case 28: 
            { return MAIN;
            } 
            // fall through
          case 76: break;
          case 29: 
            { return RULE;
            } 
            // fall through
          case 77: break;
          case 30: 
            { return TRUE;
            } 
            // fall through
          case 78: break;
          case 31: 
            { return ELSE;
            } 
            // fall through
          case 79: break;
          case 32: 
            { return FUNC;
            } 
            // fall through
          case 80: break;
          case 33: 
            { return NULL;
            } 
            // fall through
          case 81: break;
          case 34: 
            { return PARAM;
            } 
            // fall through
          case 82: break;
          case 35: 
            { return FALSE;
            } 
            // fall through
          case 83: break;
          case 36: 
            { return BREAK;
            } 
            // fall through
          case 84: break;
          case 37: 
            { return IMPORT;
            } 
            // fall through
          case 85: break;
          case 38: 
            { return RETURN;
            } 
            // fall through
          case 86: break;
          case 39: 
            { return FILTER;
            } 
            // fall through
          case 87: break;
          case 40: 
            { return DEFAULT;
            } 
            // fall through
          case 88: break;
          case 41: 
            { return CONTINUE;
            } 
            // fall through
          case 89: break;
          case 42: 
            { return CONTAINS;
            } 
            // fall through
          case 90: break;
          case 43: 
            { return UNDEFINED;
            } 
            // fall through
          case 91: break;
          case 44: 
            { return CONDITION;
            } 
            // fall through
          case 92: break;
          case 45: 
            { return STATEMENTLIST;
            } 
            // fall through
          case 93: break;
          case 46: 
            { return UNARY_EXPRESSION;
            } 
            // fall through
          case 94: break;
          case 47: 
            { return ASSIGNMENTOPERATORS;
            } 
            // fall through
          case 95: break;
          case 48: 
            { return PRIMARY_EXPRESSION;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
